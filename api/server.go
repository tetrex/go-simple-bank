package api

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger" // middlerware for echo-swagger
	db "github.com/tetrex/backend-masterclass-go/db/sqlc"
	_ "github.com/tetrex/backend-masterclass-go/docs" // docs is generated by Swag CLI
	"github.com/tetrex/backend-masterclass-go/token"
	"github.com/tetrex/backend-masterclass-go/util"
)

type Server struct {
	config     util.Config
	tokenMaker token.Maker
	db         db.Store
	router     *echo.Echo
	validator  *validator.Validate
}

func NewServer(config util.Config, s db.Store) (*Server, error) {
	tokenMaker, err := token.NewPasetoMaker(config.TokenSymmetricKey)
	if err != nil {
		return nil, fmt.Errorf("cannot create token maker: %w", err)
	}

	r := echo.New()
	v := util.NewValidator()

	server := &Server{
		db:         s,
		router:     r,
		validator:  v,
		config:     config,
		tokenMaker: tokenMaker,
	}
	return server, nil
}

func (server *Server) Start() {

	// health check api
	server.router.GET("/", server.health)

	//v1 group
	v1 := server.router.Group("v1/")

	// swagger docs
	v1.GET("docs/*", echoSwagger.WrapHandler)

	//login
	v1.POST("login", server.loginUser)

	//accounts
	v1.POST("account", server.createAccount)
	v1.GET("account/:id", server.getAccount)
	v1.POST("accounts", server.listAccounts)

	//transfer
	v1.POST("transfer", server.createTransfer)

	//user
	v1.POST("user", server.createUser)
	// -------------

	log.Printf("Starting server :: %d", server.config.ServerPort)
	if err := server.router.Start(fmt.Sprintf(":%d", server.config.ServerPort)); err != nil && err != http.ErrServerClosed {
		log.Fatal("Server startup failed")
	}
}

// Health godoc
//
//	@summary		For health check, of server
//	@description	Gives us Server Time , To check health of server
//	@tags			health
//	@accept			json
//	@produce		json
//	@success		200	{object}	util.OkResponse{data=int64}
//	@failure		500	{object}	error
//	@router			/ [get]
func (s *Server) health(c echo.Context) error {
	return c.JSON(http.StatusOK, util.OkResponse{Message: "server,all good", Data: time.Now().UnixNano()})
}
